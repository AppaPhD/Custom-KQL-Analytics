{
    "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "workspace": {
            "type": "String"
        }
    },
    "resources": [
        {
            "id": "[concat(resourceId('Microsoft.OperationalInsights/workspaces/providers', parameters('workspace'), 'Microsoft.SecurityInsights'),'/alertRules/53c45a23-f3c7-4ba2-ac27-48e9fe5e0101')]",
            "name": "[concat(parameters('workspace'),'/Microsoft.SecurityInsights/53c45a23-f3c7-4ba2-ac27-48e9fe5e0101')]",
            "type": "Microsoft.OperationalInsights/workspaces/providers/alertRules",
            "kind": "Scheduled",
            "apiVersion": "2023-12-01-preview",
            "properties": {
                "displayName": "_DEV: Anomalous Service Account Usage",
                "description": "This will detect any anomalous service account activity, either a user directly logging into a service account (interactive/non-automative) or service account RDP activity. \n\nHandling Guidance: \n1. Identify type of activity alert triggered on. \n2. For direct svc account login, verify login by confirming if the login was authorized.\n3. If it wasn't authorized, revoke access and reset svc account credentials. \n4. For svc account RDP, validate purpose of RDP session, identify source of session.\n5. If not authorized, terminate session and rotate credentials.",
                "severity": "Medium",
                "enabled": true,
                "query": "// Contributor: Sky Tran\n// Reviewer: James Kim\n//\n// Description: This will detect any anomalous service account activity, either a user directly logging into a service account (interactive/non-automative) or service account RDP activity.\n//\n// Change notes\n// ------------\n// 05/15/25 Sky Tran - initial query\n// 06/25/25 Sky Tran - added SigninLogs table for enrichment\n// 06/26/25 Sky Tran - added _DEV prefix, fixed entity mapping, added handling guidance\n// 06/26/25 Sky Tran - more tuning \n//\n// Handling Guidance:\n// 1. Identify type of activity alert triggered on. \n// 2. For direct svc account login, verify login by confirming if the login was authorized.\n// 3. If it wasn't authorized, revoke access and reset svc account credentials. \n// 4. For svc account RDP, validate purpose of RDP session, identify source of session.\n// 5. If not authorized, terminate session and rotate credentials.\n//\nunion \n( \n    DeviceLogonEvents\n        | where LogonType == \"RemoteInteractive\"\n        | where AccountName contains \"svc\"\n        | where MachineGroup !has \"CREM\" // temp ignore for CREM servers\n        | where not(AccountName contains \"etl\" and DeviceName contains \"etl\") // ignore etl svc accounts transferring data out of db thru etl device\n        | where not((AccountName contains \"dba\" or AccountName contains \"sql\") and DeviceName contains \"sql\") // ignore dba/sql service accounts doing transactions on sql servers\n        | where not(AccountName == \"svctfsautomation\" and DeviceName contains \"slnmdev\") // slnm dev servers meant for selenium automation testing\n        | where not(AccountName == \"svctfsserviceprd\") // ignore tfs prd service account doing work on tfs prd build controller server\n        | where not(AccountName == \"svctfstestagent\" and DeviceName contains \"tft\") // ignore tfs test agent doing work on tft (tfs test) server\n        | where not(AccountName == \"svctfstestagent\" and DeviceName contains \"tfbc\")\n        | where not(AccountName == \"svctfstestagent\" and DeviceName contains \"loadprd\") // ignore test agent doing work on load runner servers (loadrunner is a software testing tool for simulating user load)\n        | where not(AccountName == \"svctfstestagent\" and DeviceName contains \"tclm\") // ignore test agent accessing tclm - group of automation tool licensing servers\n        | where AccountName != \"svccgopsprd\"\n        | extend Description = \"Anomalous service account RDP\"\n        | project TimeGenerated, Description, AccountName, Target = DeviceName, InitiatingProcessCommandLine, LogonTypeName = '10 - RemoteInteractive'\n),\n(\n    IdentityLogonEvents\n        | where TargetAccountDisplayName startswith \"svc\" // logs into service account\n        | where TargetAccountDisplayName !contains \"sq\" // SQL user agent logs in as svc accounts on user's behalf to interact with DB\n        | where TargetAccountDisplayName != \"SvcTFSServicePrd\" // tfs jobs execute on behalf of the user who issued the command\n        | where TargetAccountDisplayName != \"svcctxxenappdev\" // citrix \n        | where TargetAccountDisplayName != \"svcHistoricalEditPRD\" // legacy researcher/market manager application (if they RDP and access, it will set off type 10, if they access normally, it will set off type 3/5)\n        | where TargetAccountDisplayName !contains \"enterprise\" // CRM legacy will access svcEnterpriseDev/Tst/Prd, another legacy EDSF application will access svcEnterpriseDEV-A/B, svcEnterprisePRD-A/B, etc\n        | join IdentityInfo on AccountDisplayName // ensures only catches users\n        | join (SecurityEvent\n            | where isnotempty(IpAddress) and isnotempty(LogonType)) \n            on $left.IPAddress == $right.IpAddress\n        | where LogonTypeName != '' and LogonTypeName !contains \"3\" and LogonTypeName !contains \"5\" // only catches interactive/non-automated/RDP svc account usage (ignores network/automated)\n        | extend Description = \"Direct user login to service account\" \n        | project TimeGenerated, Description, AccountName = AccountUpn, Target = TargetAccountDisplayName, InitiatingProcessCommandLine = '', LogonTypeName\n),\n(\n    SigninLogs\n        | where IsInteractive == true\n        | where UserPrincipalName startswith \"svc\" // logs into service account\n        | where UserPrincipalName !contains \"sq\" // SQL user agent logs in as svc accounts on user's behalf to interact with DB\n        | where UserPrincipalName !in (\"svco365webentmonitor@costar.com\", \"svcwe_teams_chat_bot@costar.com\", \"svc_thousandeyes_net@costar.com\", \"svcent-grph-svcs@costar.com\", \"svccasemgmtpresence@costar.com\")\n        | where not(DeviceDetail.displayName == \"OCJBURWELL6\" and Identity contains \"COST_PRD\")\n        | where Identity != \"svcMacOSBuildAgent\"\n        | where not(DeviceDetail.displayName == \"DCVSUBRAMANIAN1\") // dba idk why hes doing all this\n        | where UserPrincipalName !contains \"edsf\" and DeviceDetail.displayName !contains \"PRD\" and DeviceDetail.displayName !contains \"TST\" and DeviceDetail.displayName !contains \"DEV\" and DeviceDetail.displayName !contains \"QA\"\n        | where not(UserAgent == \"node-fetch/1.0 (+https://github.com/bitinn/node-fetch)\" and UserPrincipalName == \"svchomesresearch@costar.com\")\n        | where ClientAppUsed == \"Browser\"\n        | where isempty(DeviceDetail.displayName) == false and DeviceDetail.displayName !startswith \"MOBILEBUILD\"\n        | extend Description = \"Direct user login to service account\"\n        | summarize count() by bin(TimeGenerated, 1h), Description, tostring(DeviceDetail.displayName), Identity\n        | project TimeGenerated, Description, AccountName = DeviceDetail_displayName, Target = Identity, InitiatingProcessCommandLine = '', LogonTypeName = \"10 - RemoteInteractive\"\n)",
                "queryFrequency": "PT5H",
                "queryPeriod": "PT5H",
                "triggerOperator": "GreaterThan",
                "triggerThreshold": 0,
                "suppressionDuration": "PT5H",
                "suppressionEnabled": false,
                "startTimeUtc": null,
                "tactics": [
                    "DefenseEvasion",
                    "LateralMovement",
                    "PrivilegeEscalation"
                ],
                "techniques": [],
                "subTechniques": [],
                "alertRuleTemplateName": null,
                "incidentConfiguration": {
                    "createIncident": true,
                    "groupingConfiguration": {
                        "enabled": false,
                        "reopenClosedIncident": false,
                        "lookbackDuration": "PT5H",
                        "matchingMethod": "AllEntities",
                        "groupByEntities": [],
                        "groupByAlertDetails": [],
                        "groupByCustomDetails": []
                    }
                },
                "eventGroupingSettings": {
                    "aggregationKind": "SingleAlert"
                },
                "alertDetailsOverride": null,
                "customDetails": {},
                "entityMappings": [
                    {
                        "entityType": "Process",
                        "fieldMappings": [
                            {
                                "identifier": "CommandLine",
                                "columnName": "InitiatingProcessCommandLine"
                            }
                        ]
                    }
                ],
                "sentinelEntitiesMappings": [
                    {
                        "columnName": "AccountName"
                    },
                    {
                        "columnName": "Target"
                    },
                    {
                        "columnName": "Description"
                    }
                ],
                "templateVersion": null
            }
        }
    ]
}